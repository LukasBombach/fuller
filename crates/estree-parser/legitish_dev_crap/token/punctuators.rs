#[derive(Debug, PartialEq, Clone)]
pub enum Punctuator {
    LBrace,
    LParen,
    RParen,
    LBracket,
    RBracket,
    Dot,
    Ellipsis,
    Semicolon,
    Comma,
    LAngle,
    RAngle,
    LEqual,
    GEqual,
    Equal,
    NEqual,
    StrictEqual,
    StrictNEqual,
    Plus,
    Minus,
    Star,
    Mod,
    Pow,
    Inc,
    Dec,
    LShift,
    RShift,
    ZRShift,
    BitAnd,
    BitOr,
    BitXor,
    Bang,
    Tilde,
    LogicalAnd,
    LogicalOr,
    Question,
    Colon,
    Assign,
    PlusAssign,
    MinusAssign,
    StarAssign,
    ModAssign,
    PowAssign,
    LShiftAssign,
    RShiftAssign,
    ZRShiftAssign,
    BitAndAssign,
    BitOrAssign,
    BitXorAssign,
    FatArrow,
    Slash,
    SlashAssign,
    RBrace,
    Instanceof,
    // ES2020
    QMarkDot,
    DoubleQMark,
}

impl Punctuator {
    // *= /= %= += -= <<= >>= >>>= &= ^= |= **=
    pub fn is_assign_op(&self) -> bool {
        match self {
            Punctuator::PlusAssign
            | Punctuator::MinusAssign
            | Punctuator::StarAssign
            | Punctuator::ModAssign
            | Punctuator::PowAssign
            | Punctuator::LShiftAssign
            | Punctuator::RShiftAssign
            | Punctuator::ZRShiftAssign
            | Punctuator::BitAndAssign
            | Punctuator::BitOrAssign
            | Punctuator::BitXorAssign
            | Punctuator::SlashAssign => true,
            Punctuator::Equal => true,
            _ => false,
        }
    }

    pub fn is_equality_op(&self) -> bool {
        match self {
            Punctuator::Equal
            | Punctuator::StrictEqual
            | Punctuator::NEqual
            | Punctuator::StrictNEqual => true,
            _ => false,
        }
    }

    pub fn to_str(&self) -> &'static str {
        match self {
            Punctuator::LBrace => "{",
            Punctuator::LParen => "(",
            Punctuator::RParen => ")",
            Punctuator::LBracket => "[",
            Punctuator::RBracket => "]",
            Punctuator::Dot => ".",
            Punctuator::Ellipsis => "...",
            Punctuator::Semicolon => ";",
            Punctuator::Comma => ",",
            Punctuator::LAngle => "<",
            Punctuator::RAngle => ">",
            Punctuator::LEqual => "<=",
            Punctuator::GEqual => ">=",
            Punctuator::Equal => "==",
            Punctuator::NEqual => "!=",
            Punctuator::StrictEqual => "===",
            Punctuator::StrictNEqual => "!==",
            Punctuator::Plus => "+",
            Punctuator::Minus => "-",
            Punctuator::Star => "*",
            Punctuator::Mod => "%",
            Punctuator::Pow => "**",
            Punctuator::Inc => "++",
            Punctuator::Dec => "--",
            Punctuator::LShift => "<<",
            Punctuator::RShift => ">>",
            Punctuator::ZRShift => ">>>",
            Punctuator::BitAnd => "&",
            Punctuator::BitOr => "|",
            Punctuator::BitXor => "^",
            Punctuator::Bang => "!",
            Punctuator::Tilde => "~",
            Punctuator::LogicalAnd => "&&",
            Punctuator::LogicalOr => "||",
            Punctuator::Question => "?",
            Punctuator::Colon => ":",
            Punctuator::Assign => "=",
            Punctuator::PlusAssign => "+=",
            Punctuator::MinusAssign => "-=",
            Punctuator::StarAssign => "*=",
            Punctuator::ModAssign => "%=",
            Punctuator::PowAssign => "**=",
            Punctuator::LShiftAssign => "<<=",
            Punctuator::RShiftAssign => ">>=",
            Punctuator::ZRShiftAssign => ">>>=",
            Punctuator::BitAndAssign => "&=",
            Punctuator::BitOrAssign => "|=",
            Punctuator::BitXorAssign => "^=",
            Punctuator::FatArrow => "=>",
            Punctuator::Slash => "/",
            Punctuator::SlashAssign => "/=",
            Punctuator::RBrace => "}",
            Punctuator::Instanceof => "instanceof",
            // ES2020
            Punctuator::QMarkDot => "?.",
            Punctuator::DoubleQMark => "??",
        }
    }

    pub fn to_string(&self) -> String {
        match self {
            Punctuator::LBrace => String::from("{"),
            Punctuator::LParen => String::from("("),
            Punctuator::RParen => String::from(")"),
            Punctuator::LBracket => String::from("["),
            Punctuator::RBracket => String::from("]"),
            Punctuator::Dot => String::from("."),
            Punctuator::Ellipsis => String::from("..."),
            Punctuator::Semicolon => String::from(";"),
            Punctuator::Comma => String::from(","),
            Punctuator::LAngle => String::from("<"),
            Punctuator::RAngle => String::from(">"),
            Punctuator::LEqual => String::from("<="),
            Punctuator::GEqual => String::from(">="),
            Punctuator::Equal => String::from("=="),
            Punctuator::NEqual => String::from("!="),
            Punctuator::StrictEqual => String::from("==="),
            Punctuator::StrictNEqual => String::from("!=="),
            Punctuator::Plus => String::from("+"),
            Punctuator::Minus => String::from("-"),
            Punctuator::Star => String::from("*"),
            Punctuator::Mod => String::from("%"),
            Punctuator::Pow => String::from("**"),
            Punctuator::Inc => String::from("++"),
            Punctuator::Dec => String::from("--"),
            Punctuator::LShift => String::from("<<"),
            Punctuator::RShift => String::from(">>"),
            Punctuator::ZRShift => String::from(">>>"),
            Punctuator::BitAnd => String::from("&"),
            Punctuator::BitOr => String::from("|"),
            Punctuator::BitXor => String::from("^"),
            Punctuator::Bang => String::from("!"),
            Punctuator::Tilde => String::from("~"),
            Punctuator::LogicalAnd => String::from("&&"),
            Punctuator::LogicalOr => String::from("||"),
            Punctuator::Question => String::from("?"),
            Punctuator::Colon => String::from(":"),
            Punctuator::Assign => String::from("="),
            Punctuator::PlusAssign => String::from("+="),
            Punctuator::MinusAssign => String::from("-="),
            Punctuator::StarAssign => String::from("*="),
            Punctuator::ModAssign => String::from("%="),
            Punctuator::PowAssign => String::from("**="),
            Punctuator::LShiftAssign => String::from("<<="),
            Punctuator::RShiftAssign => String::from(">>="),
            Punctuator::ZRShiftAssign => String::from(">>>="),
            Punctuator::BitAndAssign => String::from("&="),
            Punctuator::BitOrAssign => String::from("|="),
            Punctuator::BitXorAssign => String::from("^="),
            Punctuator::FatArrow => String::from("=>"),
            Punctuator::Slash => String::from("/"),
            Punctuator::SlashAssign => String::from("/="),
            Punctuator::RBrace => String::from("}"),
            Punctuator::Instanceof => String::from("instanceof"),
            // ES2020
            Punctuator::QMarkDot => String::from("?."),
            Punctuator::DoubleQMark => String::from("??"),
        }
    }
}

impl From<&str> for Punctuator {
    fn from(s: &str) -> Self {
        match s {
            "{" => Punctuator::LBrace,
            "(" => Punctuator::LParen,
            ")" => Punctuator::RParen,
            "[" => Punctuator::LBracket,
            "]" => Punctuator::RBracket,
            "." => Punctuator::Dot,
            "..." => Punctuator::Ellipsis,
            ";" => Punctuator::Semicolon,
            "," => Punctuator::Comma,
            "<" => Punctuator::LAngle,
            ">" => Punctuator::RAngle,
            "<=" => Punctuator::LEqual,
            ">=" => Punctuator::GEqual,
            "==" => Punctuator::Equal,
            "!=" => Punctuator::NEqual,
            "===" => Punctuator::StrictEqual,
            "!==" => Punctuator::StrictNEqual,
            "+" => Punctuator::Plus,
            "-" => Punctuator::Minus,
            "*" => Punctuator::Star,
            "%" => Punctuator::Mod,
            "**" => Punctuator::Pow,
            "++" => Punctuator::Inc,
            "--" => Punctuator::Dec,
            "<<" => Punctuator::LShift,
            ">>" => Punctuator::RShift,
            ">>>" => Punctuator::ZRShift,
            "&" => Punctuator::BitAnd,
            "|" => Punctuator::BitOr,
            "^" => Punctuator::BitXor,
            "!" => Punctuator::Bang,
            "~" => Punctuator::Tilde,
            "&&" => Punctuator::LogicalAnd,
            "||" => Punctuator::LogicalOr,
            "?" => Punctuator::Question,
            ":" => Punctuator::Colon,
            "=" => Punctuator::Assign,
            "+=" => Punctuator::PlusAssign,
            "-=" => Punctuator::MinusAssign,
            "*=" => Punctuator::StarAssign,
            "%=" => Punctuator::ModAssign,
            "**=" => Punctuator::PowAssign,
            "<<=" => Punctuator::LShiftAssign,
            ">>=" => Punctuator::RShiftAssign,
            ">>>=" => Punctuator::ZRShiftAssign,
            "&=" => Punctuator::BitAndAssign,
            "|=" => Punctuator::BitOrAssign,
            "^=" => Punctuator::BitXorAssign,
            "=>" => Punctuator::FatArrow,
            "/" => Punctuator::Slash,
            "/=" => Punctuator::SlashAssign,
            "}" => Punctuator::RBrace,
            "instanceof" => Punctuator::Instanceof,
            // ES2020
            "?." => Punctuator::QMarkDot,
            "??" => Punctuator::DoubleQMark,
            _ => panic!("Invalid punctuator."),
        }
    }
}
